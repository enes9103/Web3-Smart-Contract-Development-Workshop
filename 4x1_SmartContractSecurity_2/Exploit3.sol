// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract WhitelistNFT is ERC721, Ownable {
    uint256 constant MAX_SUPPLY = 100;
    uint256 constant MINT_FEE = 0.1 ether;

    bool whitelistSale;
    uint256 lastId; // 0-99
    
    mapping (address => bool) hasMinted;
    
    mapping (address => uint256) _whitelistAmounts;

    constructor() ERC721("WhitelistNFT", "WNFT") {
        whitelistSale = true;
    }

    // Beyaz liste satışını başlat
    function startWhitelistSale() external onlyOwner {
        whitelistSale = true;
    }

    // Beyaz liste satışını bitir
    function endWhitelistSale() external onlyOwner {
        whitelistSale = false;
    }

    // Kontrat sahibi istediği kullanıcıyı beyaz listeye koyabilir
    function addToWhitelist(address who, uint256 amount) external onlyOwner {
        _whitelistAmounts[who] = amount;
    } 

    // Kontrat sahibi istediği kullanıcıyı beyaz listeden çıkarabilir
    function removeFromWhitelist(address who) external onlyOwner {
        delete _whitelistAmounts[who];
    }

    function withdrawAll() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }  

    function mintFromWhitelist(uint256 amount) external payable {
        // Mint işleminin toplam arzı geçmediğinden emin oluyoruz
        require(lastId + amount < MAX_SUPPLY, "Max supply reached");

        // Bu satır sayesinde kullanıcı whitelist ile kendisine verilen hakkın üzerinde mint edemeyecek
        require(balanceOf(msg.sender) + amount <= _whitelistAmounts[msg.sender], "Account has minted max amount of tokens");
        
        // amount adet token'ı msg.sender'a yolla
        for (uint256 i = 0; i < amount; i++) {
            _mint(msg.sender, lastId + i);
        }

        // Son token IDsini bastığımız token miktarında arttır
        lastId += amount;
    }

    function mint() external payable {
        // Mint işleminin toplam arzı geçmediğinden emin oluyoruz
        require(lastId < MAX_SUPPLY, "Max supply reached");

        // Bir kere ücretini veren kullanıcı bir daha mint edemez
        require(!hasMinted[msg.sender], "Account already minted once");

        // Son ID'yi kullanıcıya yolla
        _mint(msg.sender, lastId);
        lastId += 1;
    } 
}